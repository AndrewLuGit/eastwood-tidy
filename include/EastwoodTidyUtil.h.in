#ifndef LLVM_CLANG_TOOLS_EXTRA_CLANG_TIDY_EASTWOOD_TIDY_UTIL_H
#define LLVM_CLANG_TOOLS_EXTRA_CLANG_TIDY_EASTWOOD_TIDY_UTIL_H

#include "clang/AST/ASTContext.h"
#include "clang/AST/DeclBase.h"
#include "clang/ASTMatchers/ASTMatchFinder.h"
#include "clang/Basic/SourceLocation.h"
#include "clang/Basic/SourceManager.h"
#include "clang/Lex/Lexer.h"
#include "clang/Lex/Token.h"
#include "llvm/ADT/StringRef.h"
#include "llvm/Support/raw_ostream.h"
#include <iostream>
#include <memory>
#include <sstream>
#include <string>

using namespace clang;
using namespace clang::ast_matchers;
using namespace llvm;

class EastwoodTidyDebugStream {
private:
    bool enabled;

public:
    EastwoodTidyDebugStream(bool enabled) : enabled(enabled) {}
    template <typename T>
    friend EastwoodTidyDebugStream &operator<<(EastwoodTidyDebugStream &stream,
                                               T thing) {
        if (stream.enabled) {
            std::cout << thing;
        }
        return stream;
    }
    friend EastwoodTidyDebugStream &operator<<(EastwoodTidyDebugStream &stream,
                                               std::ostream &(*pf)(std::ostream &)) {
        if (stream.enabled) {
            std::cout << pf;
        }
        return stream;
    }
    friend EastwoodTidyDebugStream &
    operator<<(EastwoodTidyDebugStream &stream,
               std::basic_ios<char> &(*pf)(std::ostream &)) {
        if (stream.enabled) {
            std::cout << pf;
        }
        return stream;
    }
    friend EastwoodTidyDebugStream &operator<<(EastwoodTidyDebugStream &stream,
                                               std::ios_base &(*pf)(std::ostream &)) {
        if (stream.enabled) {
            std::cout << pf;
        }
        return stream;
    }
};

/* Provides base common uility functions for eastwood tidy checks. */
class EastwoodTidyCheckBase {
protected:
    bool debug;
    EastwoodTidyDebugStream *debugStream;

public:
    EastwoodTidyCheckBase(void) : debug(false) {}
    EastwoodTidyDebugStream &dout();

    template <typename T> void dbgdump(T dumpable, const ASTContext &Context) {
        std::string init;
        raw_string_ostream rso(init);
        dumpable->dump(rso, Context);
        this->dout() << rso.str() << std::endl;
    }

    std::shared_ptr<std::string> tok_string(const SourceManager &SM, const Token &tok);
    std::shared_ptr<std::string> sourcerange_string(const SourceManager &SM,
                                                    const SourceRange &range);

    std::shared_ptr<std::vector<Token>>
    relex_file(const MatchFinder::MatchResult &Result, const std::string &match_name,
               bool keep_whitespace = true);
};

#endif // LLVM_CLANG_TOOLS_EXTRA_CLANG_TIDY_EASTWOOD_TIDY_UTIL_H