
//===--- Rule4bCheck.h - clang-tidy -----------------------------*- C++ -*-===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_CLANG_TOOLS_EXTRA_CLANG_TIDY_EASTWOOD_RULE4ACHECK_H
#define LLVM_CLANG_TOOLS_EXTRA_CLANG_TIDY_EASTWOOD_RULE4ACHECK_H
#include "EastwoodTidyUtil.h"

#include "@CLANG_TIDY_TOPLEVEL@/ClangTidyCheck.h"

#include "clang/AST/ASTContext.h"
#include "clang/ASTMatchers/ASTMatchFinder.h"
#include "clang/Lex/Lexer.h"
#include "clang/Lex/Token.h"
#include <deque>

/* Make sure the location is checkable. */
#define CHECK_LOC(MatchedDecl)                                                         \
    if (not SM.isWrittenInMainFile(MatchedDecl->getBeginLoc()) or                      \
        not MatchedDecl->getBeginLoc().isValid() or                                    \
        SM.isMacroArgExpansion(MatchedDecl->getBeginLoc()) or                          \
        SM.isMacroBodyExpansion(MatchedDecl->getBeginLoc())) {                         \
        return;                                                                        \
    }

namespace clang {
namespace tidy {
namespace eastwood {

class Rule4aCheck : public ClangTidyCheck, public EastwoodTidyCheckBase {
private:
    std::string debug_enabled;

public:
    /* Constructors */
    Rule4aCheck(StringRef Name, ClangTidyContext *Context);

    /* Overrides */
    void registerMatchers(ast_matchers::MatchFinder *Finder) override;
    void check(const ast_matchers::MatchFinder::MatchResult &Result) override;
    void onEndOfTranslationUnit(void) override;
    size_t indent_level;
    std::deque<SourceLocation> opens;
    std::deque<SourceLocation> closes;
    std::deque<size_t> broken_lines;
    std::vector<Token> tokens;
    const SourceManager *SMan;
    ASTContext *ctx;
}; // Rule4bCheck
} // namespace eastwood
} // namespace tidy
} // namespace clang

#endif // LLVM_CLANG_TOOLS_EXTRA_CLANG_TIDY_EASTWOOD_RULE4ACHECK_H
