
//===--- Rule11dCheck.h - clang-tidy -----------------------------*- C++ -*-===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_CLANG_TOOLS_EXTRA_CLANG_TIDY_EASTWOOD_RULE11DCHECK_H
#define LLVM_CLANG_TOOLS_EXTRA_CLANG_TIDY_EASTWOOD_RULE11DCHECK_H

#include "@CLANG_TIDY_TOPLEVEL@/ClangTidyCheck.h"

#include "clang/AST/ASTContext.h"
#include "clang/ASTMatchers/ASTMatchFinder.h"
#include "clang/Lex/Lexer.h"
#include "clang/Lex/PPCallbacks.h"
#include "clang/Lex/Preprocessor.h"
#include "clang/Lex/Token.h"

#include <iomanip>
#include <iostream>
#include <map>
#include <regex>
#include <string>
#include <utility>
#include <vector>

namespace clang {
    namespace tidy {
        namespace eastwood {

            class Rule11dCheck : public ClangTidyCheck {
            private:
                std::vector<SourceRange> declarationRanges;

            public:
                /* Constructors */
                Rule11dCheck(StringRef Name, ClangTidyContext *Context)
                    : ClangTidyCheck(Name, Context) {}

                /* Overrides */
                void registerMatchers(ast_matchers::MatchFinder *Finder) override;
                void registerPPCallbacks(const SourceManager &SM, Preprocessor *PP,
                                         Preprocessor *ModuleExpanderPP) override;
                void
                check(const ast_matchers::MatchFinder::MatchResult &Result) override;
            }; // Rule11dCheck
        }      // namespace eastwood
    }          // namespace tidy
} // namespace clang

#endif // LLVM_CLANG_TOOLS_EXTRA_CLANG_TIDY_EASTWOOD_RULE11DCHECK_H
