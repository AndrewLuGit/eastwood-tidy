//===--- Rule1aCheck.h - clang-tidy -----------------------------*- C++ -*-===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_CLANG_TOOLS_EXTRA_CLANG_TIDY_EASTWOOD_RULE1BCHECK_H
#define LLVM_CLANG_TOOLS_EXTRA_CLANG_TIDY_EASTWOOD_RULE1BCHECK_H
#include "EastwoodTidyUtil.h"

#include "@CLANG_TIDY_TOPLEVEL@/ClangTidyCheck.h"

#include "clang/AST/ASTContext.h"
#include "clang/ASTMatchers/ASTMatchFinder.h"

#include <iomanip>
#include <iostream>
#include <map>
#include <regex>
#include <sstream>
#include <string>
#include <utility>

namespace clang {
namespace tidy {
namespace eastwood {

class Rule1bCheck : public ClangTidyCheck, public EastwoodTidyCheckBase {

private:
    std::string dump;
    std::map<std::string, std::vector<std::string>> declarations;
    std::string debug_enabled;

public:
    /* Constructors */
    Rule1bCheck(StringRef Name, ClangTidyContext *Context);

    /* Overrides */
    void registerMatchers(ast_matchers::MatchFinder *Finder) override;
    void check(const ast_matchers::MatchFinder::MatchResult &Result) override;
    void storeOptions(ClangTidyOptions::OptionMap &Opts) override;
    void onEndOfTranslationUnit() override;

    void saveVar(std::string name, std::string type);

}; // Rule1bCheck

} // namespace eastwood
} // namespace tidy
} // namespace clang

#endif // LLVM_CLANG_TOOLS_EXTRA_CLANG_TIDY_EASTWOOD_RULE1BCHECK_H
