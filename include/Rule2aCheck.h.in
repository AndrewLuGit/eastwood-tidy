
//===--- Rule2aCheck.h - clang-tidy -----------------------------*- C++ -*-===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_CLANG_TOOLS_EXTRA_CLANG_TIDY_EASTWOOD_RULE2ACHECK_H
#define LLVM_CLANG_TOOLS_EXTRA_CLANG_TIDY_EASTWOOD_RULE2ACHECK_H
#include "EastwoodTidyUtil.h"

#include "@CLANG_TIDY_TOPLEVEL@/ClangTidyCheck.h"
#include "@CLANG_TIDY_TOPLEVEL@/utils/LexerUtils.h"

#include "clang/AST/ASTContext.h"
#include "clang/ASTMatchers/ASTMatchFinder.h"
#include "clang/Lex/Lexer.h"
#include "clang/Lex/Token.h"
#include <deque>
#include <unordered_map>

#include <vector>

/* Make sure the location is checkable. */
#define CHECK_LOC(MatchedDecl)                                                         \
    if (not this->source_manager->isWrittenInMainFile(MatchedDecl->getBeginLoc()) or   \
        not MatchedDecl->getBeginLoc().isValid() or                                    \
        this->source_manager->isMacroArgExpansion(MatchedDecl->getBeginLoc()) or       \
        this->source_manager->isMacroBodyExpansion(MatchedDecl->getBeginLoc())) {      \
        return;                                                                        \
    }

#define LOG_OPEN(Reason, Location)                                                     \
    this->dout() << "Adding OPEN for " << Reason << " at "                             \
                 << Location.printToString(*this->source_manager) << "\n";

#define LOG_CLOSE(Reason, Location)                                                    \
    this->dout() << "Adding CLOSE for " << Reason << " at "                            \
                 << Location.printToString(*this->source_manager) << "\n";

/* The number of spaces an indent should be wide */
#define INDENT_AMOUNT (2)

namespace clang {
namespace tidy {
namespace eastwood {

class Rule2aCheck : public ClangTidyCheck, public EastwoodTidyCheckBase {
private:
    std::string debug_enabled;
    std::vector<size_t> over_length_lines;
    std::vector<size_t> broken_lines;
    std::unordered_map<size_t, size_t> indent_map;
    size_t indent_level;
    std::deque<SourceLocation> opens;
    std::deque<SourceLocation> closes;
    std::deque<SourceRange> broken_ranges;

public:
    /* Constructors */
    Rule2aCheck(StringRef Name, ClangTidyContext *Context);

    /* Overrides */
    void registerMatchers(ast_matchers::MatchFinder *Finder) override;
    void check(const ast_matchers::MatchFinder::MatchResult &Result) override;
    void onEndOfTranslationUnit() override;

}; // Rule2aCheck
} // namespace eastwood
} // namespace tidy
} // namespace clang

#endif // LLVM_CLANG_TOOLS_EXTRA_CLANG_TIDY_EASTWOOD_RULE2ACHECK_H
