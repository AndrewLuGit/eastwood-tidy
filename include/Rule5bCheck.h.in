
//===--- Rule5bCheck.h - clang-tidy -----------------------------*- C++ -*-===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_CLANG_TOOLS_EXTRA_CLANG_TIDY_EASTWOOD_RULE5BCHECK_H
#define LLVM_CLANG_TOOLS_EXTRA_CLANG_TIDY_EASTWOOD_RULE5BCHECK_H
#include "EastwoodTidyUtil.h"

#include "@CLANG_TIDY_TOPLEVEL@/ClangTidyCheck.h"

#include "clang/AST/ASTContext.h"
#include "clang/AST/RecursiveASTVisitor.h"
#include "clang/ASTMatchers/ASTMatchFinder.h"
#include "clang/Lex/Lexer.h"
#include "clang/Lex/MacroInfo.h"
#include "clang/Lex/PPCallbacks.h"
#include "clang/Lex/Pragma.h"
#include "clang/Lex/Preprocessor.h"
#include "clang/Lex/Token.h"
#include <iostream>
#include <vector>

namespace clang {
namespace tidy {
namespace eastwood {
class Rule5bCheck : public ClangTidyCheck, public EastwoodTidyCheckBase {
    friend class Rule5bPPCallBack;

private:
    std::string debug_enabled;

public:
    std::vector<SourceLocation> alongside_ok_lines;

    /* Constructors */
    Rule5bCheck(StringRef Name, ClangTidyContext *Context);

    /* Overrides */
    void registerPPCallbacks(const SourceManager &SM, Preprocessor *PP,
                             Preprocessor *ModuleExpanderPP) override;
    void registerMatchers(ast_matchers::MatchFinder *Finder) override;
    void check(const ast_matchers::MatchFinder::MatchResult &Result) override;
    void onEndOfTranslationUnit() override;

}; // Rule5bCheck
} // namespace eastwood
} // namespace tidy
} // namespace clang

#endif // LLVM_CLANG_TOOLS_EXTRA_CLANG_TIDY_EASTWOOD_RULE5BCHECK_H
